//–º–µ—Ç–æ–¥–∏ JOIN(DELIMETER) & SPLIT(DELIMETER)

// JOIN
const words = ["JavaScript", "—ç—Ç–æ", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"];
console.log(words.join("")); // "JavaScript—ç—Ç–æ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"
console.log(words.join("+")); // "JavaScript+—ç—Ç–æ+–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"
console.log(words.join("---")); // "JavaScript---—ç—Ç–æ---–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"
console.log(words.join(" ")); // "JavaScript —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"
console.log(words.join("üòé")); // "JavaScriptüòé—ç—Ç–æüòé–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"

//SPLIT
const fruit = "Mango";
console.log(fruit.split("")); // ["M", "a", "n", "g", "o"]

const message = "JavaScript —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ";
console.log(message.split(" ")); // ["JavaScript", "—ç—Ç–æ", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"]


//–ú–µ—Ç–æ–¥ indexOf()

const clients = ["Mango", "Ajax", "Poly", "Kiwi"];
// console.log(clients.indexOf("Poly")); // 2
// console.log(clients.indexOf("Monkong")); // -1

//–ú–µ—Ç–æ–¥ includes()

if (!clients.includes('Monkong')) {
    console.log('Monkong –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π');
}
// console.log(clients.includes("Poly")); // true
// console.log(clients.includes("Monkong")); // false

//–ú–µ—Ç–æ–¥—ã push() –∏ pop()

//PUSH –¥–æ–±–∞–≤–ª—è—î –æ–¥–∏–Ω –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–∞ —î–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ –∫—ñ–Ω–µ—Ü—å –º–∞—Å–∏–≤—É
const numberss = [];

numberss.push(1);
console.log(numberss); // [1]

numberss.push(2);
console.log(numberss); // [1, 2]

numberss.push(3);
console.log(numberss); // [1, 2, 3]

numberss.push(4);
console.log(numberss); // [1, 2, 3, 4]

numberss.push(5);
console.log(numberss); // [1, 2, 3, 4, 5]


//POP  –≤–∏–¥–∞–ª—è—î –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –∑ –∫—ñ–Ω—Ü—è –º–∞—Å–∏–≤—É —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –≤–∏–¥–∞–ª–µ–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç
const numbers = [1, 2, 3, 4, 5];

console.log(numbers.pop()); //  5
console.log(numbers); // [1, 2, 3, 4]

console.log(numbers.pop()); //  4
console.log(numbers); // [1, 2, 3]

console.log(numbers.pop()); //  3
console.log(numbers); // [1, 2]

console.log(numbers.pop()); //  2
console.log(numbers); // [1]

console.log(numbers.pop()); //  1
console.log(numbers); // []

//–ø—Ä–∏–º—É—Å–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤
// let cars = [];
// while (true) {
//     const car = prompt('–í–≤–µ–¥—ñ—Ç—å –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è');

//     if (!car) break;

//     cars.push(car);
//     console.log(cars);
// } 

// const lastCar = cars.pop();
// console.log(`–û—Å—Ç–∞–Ω–Ω—ñ–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å ${lastCar}`);
// console.log(cars, `–ú–∞—Å–∏–≤ –ø—ñ—Å–ª—è –º–µ—Ç–æ–¥—É pop`);


/** –ú–ï–¢–û–î SLICE */ // –¥–∞–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –ù–µ –≤–Ω–æ—Å–∏—Ç—å –∑–º—ñ–Ω–∏ –≤ –ø–æ—Ç–æ—á–Ω–∏–π –º–∞—Å–∏–≤
//                                  —ñ –∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î –ù–æ–≤–∏–π –º–∞—Å–∏–≤

// –ü–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç - –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å
// –î—Ä—É–≥–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç - –∫—ñ–Ω—Ü–µ–≤–∏–π —ñ–Ω–¥–µ–∫—Å (–ù–ï –í–ö–õ–Æ–ß–ù–û)
/** –∑–∞–±—Ä–∞—Ç–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –æ–∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ —Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ */
const fruits = ['kiwi', 'banana', 'apple', 'pineapple', 'guawa', 'cucumber', 'lemon'];
const fruitsWithoutEdgeElem = fruits.slice(1, fruits.length - 1);
// const fruitsWithoutEdgeElem = fruits.slice(1, fruits.length - 2);// ¬†—Ç–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –≤—ñ–¥—Ä–∏–∑–∞—Ç–∏ –ø–æ 2 –∞–±–æ –±—ñ–ª—å—à–µ —î–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É
// const fruitsWithoutEdgeElem = fruits.slice(2); // –º–µ—Ç–æ–¥ slice –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–∞–≤—ñ—Ç—å –∑ –æ–¥–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
console.log(fruitsWithoutEdgeElem, `–º–∞—Å–∏–≤ fruits –ø—ñ—Å–ª—è –≤–∏–∫–æ—Ä—Å–∏—Å—Ç–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É SLICE`);
console.log(fruits, '–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤ –¥–ª—è slice');

/** –ú–ï–¢–û–î SPLICE */ // –¥–∞–Ω–∏–π –º–µ—Ç–æ–¥ –í–Ω–æ—Å–∏—Ç—å –∑–º—ñ–Ω–∏ –≤ –ø–æ—Ç–æ—á–Ω–∏–π –º–∞—Å–∏–≤
//                                    —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –ù–æ–≤–∏–π –∑–º—ñ–Ω–µ–Ω–∏–π –º–∞—Å–∏–≤

// –ü–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç - –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤–∞
// –î—Ä—É–≥–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç - –∫—ñ–∫–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
// –¢—Ä–µ—Ç–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±"—î–∫—Ç—É –≤ –º–∞—Å–∏–≤
const phones = ['nokia', 'motorola', 'blackberry', 'ericsson', 'siemens'];
const splicePhones = phones.splice(1, 3); // —Ä–∞—Ö—É—î—Ç—å—Å—è –∑ —ñ–Ω–¥–µ–∫—É 1 —ñ –∑–∞–±–∏—Ä–∞—î 3 —î–ª–µ–º–µ–Ω—Ç–∏
// const splicePhones = phones.splice(1, 3, 'audi'); // —è–∫—â–æ –≤–≤–µ—Å—Ç–∏ —Ç—Ä–µ—Ç—ñ–π –∞—Ä–≥—É–º–µ–Ω—Ç - –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤ –º–∞—Å–∏–≤
console.log(splicePhones, '–º–∞—Å–∏–≤ phones –ø—ñ—Å–ª—è –≤–∏–∫–æ—Ä—Å–∏—Å—Ç–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É SPLICE');
console.log(phones, '–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤ –¥–ª—è splice');




/** –ú–ï–¢–û–î CONCAT */

const oldPhones = ['nokia', 'motorola', 'blackberry', 'ericsson', 'siemens'];
const newPhones = ['iphone', 'samsung', 'huawei', 'oppo', 'xiaomi'];
// console.log(oldPhones, newPhones);
// const newAndOldPhones = oldPhones.concat(newPhones); // —Å—Ç–∞—Ä–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∑–∞–ø–∏—Å—É
const newAndOldPhones = [...newPhones, ...oldPhones]; // –Ω–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∑–∞–ø–∏—Å—É ( "..." - —Ç—Ä–∏ –∫—Ä–∞–ø–∫–∏ - –º–µ—Ç–æ–¥ –°–ü–†–ï–î)
console.log(`–í—Å—ñ —Ç–µ–ª–µ—Ñ–æ–Ω–∏: ${newAndOldPhones}`);

